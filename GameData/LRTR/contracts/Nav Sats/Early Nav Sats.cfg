//Originally from RP-1 v1.5 
//https://github.com/KSP-RO/RP-0
//Used under Creative Commons License

CONTRACT_TYPE:NEEDS[LRTRContracts]
{
	name = EarlyNavSats
	title = Early Navigation Satellite  // Representative of Transit 4 and 5 series
	group = NavSats


	description = Our engineers are once again requesting a new navigational satellite test article.  Please place one into the proper orbit around Earth.&br;&br;<b><color=red>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b>&br;&br;<b><color=white>Removal Condition: Completion of a Operational Navigation System contract</color></b>&br;&br;<b>Number of Contracts Completed: @index / @maxCompletions</b>
	genericDescription = Put a satellite into the requested orbit.

	synopsis = Launch a navigational satellite into the proper orbit

	completedMessage = Success! We are getting more Doppler curves to refine our navigation algorithms.

	sortKey = 550

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 0
	maxExpiry = 0
	maxCompletions = 4
	maxSimultaneous = 1
	deadline = LRTRDaysPerYear() * LRTRDeadlineMult()  // 1 year

	targetBody = HomeWorld()

	prestige = Trivial       // 1.0x
	advanceFunds = 10000 * @LRTR:globalHardContractMultiplier
	rewardFunds = 5000 * @LRTR:globalHardContractMultiplier
	rewardScience = 0
	rewardReputation = 10
	failureReputation = 10
	failureFunds = @advanceFunds * 0.5

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstNavSat
	}
	
	REQUIREMENT
	{
		name = NotSecondGen
		type = AcceptContract
		contractType = SecondGenNavSats
		invertRequirement = True
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = OperationalNavSats
		invertRequirement = true
	}
	
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = SecondGenNavSats
		invertRequirement = true
	}
	
	DATA
	{
		type = int
		index = $EarlyNavSats_Count + 0
	}

	DATA
	{
		type = float
		minPeA = Round(@/targetBody.AtmosphereAltitude() * 3, 100000)
		maxApA = Round(@/targetBody.AtmosphereAltitude() * 6, 100000)
	}
	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		
		CONTRACT_COMPLETED_SUCCESS
		{
			EarlyNavSats_Count = $EarlyNavSats_Count + 1
		}
	}

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = EarlyNavSat
		type = VesselParameterGroup
		title = Early Navigational Satellite
		define = EarlyNavSatellite
		dissassociateVesselsOnContractCompletion = true

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @LRTR:powerLevel1
			antennaType = RELAY
			title = Deploy a relay antenna with at least @LRTR:stringLevel1 antenna rating, such as an HG-5 High Gain Antenna
		}
		PARAMETER
		{
			name = Orbit
			type = Orbit
			minPeA = @/minPeA
			maxApA = @/maxApA
			minInclination = 64.0
			maxInclination = 70.0
			disableOnStateChange = true
			title = Achieve an orbit within the stated parameters

			PARAMETER
			{
				name = Duration
				type = Duration

				duration = 2m

				preWaitText = Check for Stable Orbit
				waitingText = Checking for Stable Orbit
				completionText = Stable Orbit: Confirmed
			}
		}
	}
	BEHAVIOUR
	{
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = EarlyNavSatellite
	}

	BEHAVIOUR
	{
		name = VesselDestroyed
		type = DialogBox
		DIALOG_BOX
		{
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5
			TEXT
			{
				text = The contract has been completed successfully and the satellite has been transferred back to the customer.
			}
		}
	}
}