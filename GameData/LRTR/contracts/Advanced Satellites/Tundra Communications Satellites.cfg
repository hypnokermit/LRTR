//Originally from RP-1 v1.10 
//https://github.com/KSP-RO/RP-0
//Used under Creative Commons License

CONTRACT_TYPE:NEEDS[LRTRContracts]
{
	name = TundraRepeatComSats
	title = Tundra Commercial Communications Satellite
	group = AdvSatellites
	agent = Satellites

	description = We have a customer requesting a new Communications Satellite. Design a satellite within their specs and launch into an orbit with the proper orbital parameters as outlined in the contract.&br;&br;This contract can be completed as many times as you would like.&br;&br;<b><color=red>NOTE: The satellite will be destroyed upon completion of the contract. This simulates transfer of the payload back to the customer.</color></b>&br;&br;<b>The reward of this contract will slowly increase over time but will be reset to 0 after each completion.&br;<b>Current reward is at @rewardFactorPercent % of its nominal value. Elapsed/Expected Days: @elapsedDays / @expectedDays<br>Number of Contracts Completed: @index / unlimited</b>
	genericDescription = Put a satellite into the requested orbit.

	synopsis = Launch a new Commercial Communications Satellite

	completedMessage = Congratulations! The customer has reported the satellite is in the proper orbit.

	sortKey = 900

	cancellable = true
	declinable = true
	autoAccept = false
	minExpiry = 1
	maxExpiry = 1
	maxCompletions = 0
	maxSimultaneous = 1
	deadline = LRTRDaysPerYear() * LRTRDeadlineMult()  // 1 year

	targetBody = HomeWorld()

	prestige = Trivial       // 1.0x
	advanceFunds = (750 + (Pow(600, 0.45) * 75)) * 11.5 * @LRTR:globalHardContractMultiplier
	rewardFunds = @advanceFunds * 1.5
	rewardScience = 0
	rewardReputation = Round(1 + (@advanceFunds / 500))
	failureReputation = @rewardReputation * 1.5
	failureFunds = @advanceFunds * 0.5

	// ************ REQUIREMENTS ************

	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = FirstTundraSat
	}
	REQUIREMENT
	{
		name = CompleteContract
		type = CompleteContract
		contractType = EarlyComSat
		minCount = 2
		title = Complete 'Commercial Communications Satellite (Early)' contract at least @minCount times
	}
	
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = MolniyaRepeatComSats
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = GEORepeatComSats
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = EarlyComSat
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = ComTestSat
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = GEOWeather
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = SecondGenWeather
		invertRequirement = true
	}
	REQUIREMENT
	{
		name = AcceptContract
		type = AcceptContract
		contractType = SunSyncWeather
		invertRequirement = true
	}

	BEHAVIOUR
	{
		name = OrbitGenerator
		type = OrbitGenerator

		RANDOM_ORBIT
		{
			type = TUNDRA
		}
	}
	
	DATA
	{
		type = int
		index = $TundraRepeatComSats_Count + 0
	}

	BEHAVIOUR
	{
		name = IncrementTheCount
		type = Expression
		
		CONTRACT_OFFERED
		{
			RepeatSat_Completion = ($RepeatSat_Completion + 0) == 0 ? (UniversalTime() - 60 * LRTRHoursPerDay() * 3600) : ($RepeatSat_Completion + 0)
		}
		CONTRACT_COMPLETED_SUCCESS
		{
			TundraRepeatComSats_Count = $TundraRepeatComSats_Count + 1
			RepeatSat_Completion = UniversalTime()
		}
	}

	DATA
	{
		type = int
		antiGrindCompletion = $RepeatSat_Completion == 0 ? (UniversalTime() - @expectedDays * LRTRHoursPerDay() * 3600) : $RepeatSat_Completion
	}

	DATA
	{
		type = float
		expectedDays = 60

		elapsedDays = Round((UniversalTime() - @antiGrindCompletion) / LRTRHoursPerDay() * 3600)
		rewardFactor = Log(Max(@elapsedDays / @expectedDays * 20 - 9, 1), 2) / 3.46
		rewardFactorPercent = Round(@rewardFactor * 100, 1)
	}

	// ************ PARAMETERS ************

	PARAMETER
	{
		name = AdvComSat
		type = VesselParameterGroup
		define = AdvComSatellite
		dissassociateVesselsOnContractCompletion = true
		title = Commercial Communications Satellite

		PARAMETER
		{
			name = NewVessel
			type = NewVessel
			title = Launch a New Vessel
			hideChildren = true
		}
		PARAMETER
		{
			name = Crewmembers
			type = HasCrew
			minCrew = 0
			maxCrew = 0
			title = Uncrewed
			hideChildren = true
		}
		PARAMETER
		{
			name = HasAntenna
			type = HasAntenna
			minAntennaPower = @LRTR:powerLevel2
			antennaType = RELAY
			title = Have a relay antenna with at least @LRTR:stringLevel2 antenna rating, such as an RA-2 Relay Antenna
		}
		PARAMETER
		{
			name = ReachSpecificOrbit
			type = ReachSpecificOrbit
			displayNotes = true
			index = 0
			deviationWindow = 4
			
			PARAMETER
			{
				name = Duration
				type = Duration

				duration = 2m

				preWaitText = Check for Stable Orbit
				waitingText = Checking for Stable Orbit
				completionText = Stable Orbit: Confirmed
			}
		}
	}

	BEHAVIOUR
	{
		name = TransferVessel
		type = DestroyVessel
		onState = CONTRACT_SUCCESS
		vessel = AdvComSatellite
	}

	BEHAVIOUR
	{
		name = VesselDestroyed
		type = DialogBox
		DIALOG_BOX
		{
			title = Vessel Ownership Transferred
			condition = CONTRACT_SUCCESS
			position = CENTER
			width = 0.5
			TEXT
			{
				text = The contract has been completed successfully and the satellite has been transferred back to the customer.
			}
		}
	}
}