//
//core resizing
//
@PART[*]:HAS[#rescaleFactor[*],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@rescaleFactor *= 1.6
}
@PART[*]:HAS[~rescaleFactor[],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	rescaleFactor = 2.0
}
@PART[*]:HAS[~scale[],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	scale = 1.0
}

//
//engines
//
//fix engine clusters, otherwise clustered engines get over boosted (see below)
@PART[*]:HAS[#lrtr_engineCluster[*],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE,*:HAS[#name[ModuleEngines*]]
	{
		@maxThrust /= #$/lrtr_engineCluster$
		@UPGRADES
		{
			@UPGRADE,*
			{
				@maxThrust /= #$/lrtr_engineCluster$
			}
		}
	}
    @MODULE,*:HAS[#name[ModuleB9PartSwitch]]
    {
        @SUBTYPE,*:HAS[@MODULE]
        {
            @MODULE
            {
                @DATA:HAS[#maxThrust]
                {
                    @maxThrust /= #$/lrtr_engineCluster$
                }
            }
        }
    }
    @MODULE[ModuleEngineConfigs]
	{
		@CONFIG,*
		{
			@maxThrust /= #$/lrtr_engineCluster$
		}
	}
}
//
//rather than just boosting thrust linearly, this creates a curve to make powerful engines even more powerful
//this helps create closer to real world values for stock engines
//equation:  (maxThrust / (maxThrust + X) + 1) * maxThrust * 2.56
//gives 1-2 multiplier as maxThrust increases with X determaining the steepness of curve
//set in LRTR/rescale/engines.cfg
//
//parts without lrtr_thrustCurve don't get an extra boost to thrust
@PART[*]:HAS[~lrtr_thrustCurve,!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE,*:HAS[#name[ModuleEngines*]]
    {
        @maxThrust *= 2.56
        @UPGRADES
        {
            @UPGRADE,*
            {
                @maxThrust *= 2.56
            }
        }
	}
	
    @MODULE,*:HAS[#name[ModuleB9PartSwitch]]
    {
        @SUBTYPE,*:HAS[@MODULE]
        {
            @MODULE
            {
                @DATA:HAS[#maxThrust]
                {
                    @maxThrust *= 2.56
                }
            }
        }
    }
    @MODULE[ModuleEngineConfigs]
    {
    	@CONFIG,*:HAS[#maxThrust]
    	{
			@maxThrust *= 2.56
	   	}
    }
}
//all other parts
@PART[*]:HAS[#lrtr_thrustCurve[*],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{  
	@MODULE,*:HAS[#name[ModuleEngines*]]
	{
	    %thrustN = #$maxThrust$
	    %thrustD = #$maxThrust$
        @thrustD += #$/lrtr_thrustCurve$
	    @thrustN /= #$thrustD$
	    @thrustN += 1
	    @maxThrust *= #$thrustN$
		@maxThrust *= 2.56
		!thrustN = DEL
		!thrustD = DEL
		@UPGRADES
		{
		    @UPGRADE,*:HAS[#maxThrust]
		    {
                %thrustN = #$maxThrust$
        	    %thrustD = #$maxThrust$
	            @thrustD += #$/lrtr_thrustCurve$
        	    @thrustN /= #$thrustD$
	            @thrustN += 1
        	    @maxThrust *= #$thrustN$
		        @maxThrust *= 2.56
        		!thrustN = DEL
		        !thrustD = DEL
    		}
		}
	}
	
    @MODULE,*:HAS[#name[ModuleB9PartSwitch]]
    {
        @SUBTYPE,*:HAS[@MODULE]
        {
            @MODULE
            {
                @DATA:HAS[#maxThrust]
                {
                    %thrustN = #$maxThrust$
            	    %thrustD = #$maxThrust$
	                @thrustD += #$/lrtr_thrustCurve$
        	        @thrustN /= #$thrustD$
	                @thrustN += 1
            	    @maxThrust *= #$thrustN$
	    	        @maxThrust *= 2.56
            		!thrustN = DEL
		            !thrustD = DEL
                }
            }
        }
    }
    @MODULE[ModuleEngineConfigs]
    {
    	@CONFIG,*:HAS[#maxThrust]
    	{
			%thrustN = #$maxThrust$
			%thrustD = #$maxThrust$
			@thrustD += #$/lrtr_thrustCurve$
			@thrustN /= #$thrustD$
			@thrustN += 1
			@maxThrust *= #$thrustN$
			@maxThrust *= 2.56
			!thrustN = DEL
			!thrustD = DEL
    	}
    }
}
//solid
//numbers chosen to get near real world values matching existing motors.  No real math, just guesswork
@PART[*]:HAS[@RESOURCE[SolidFuel],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@mass *= 4.08
	@MODULE,*:HAS[#name[ModuleEngines*]]
	{
		@atmosphereCurve
		{
			@key,0 ^= :0 ::
			@key,0 *= 1.4
			@key,0 ^= :^:0 :
			@key,1 ^= :1 ::
			@key,1 *= 1.4
			@key,1 ^= :^:1 :			
		}
	}
}
@PART[*]:HAS[!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE,*:HAS[#EngineType[SolidBooster]]
	{
		@maxThrust *= 2
		@UPGRADES
		{
			@UPGRADE,*:HAS[#maxThrust]
			{
				@maxThrust *= 2
			}
		}
	}
    @MODULE[ModuleEngineConfigs]:HAS[#configuration[SolidFuel]]
    {
    	@CONFIG,*
    	{
    		@maxThrust *= 2
    	}
    }
}
//jets
@PART[*]:HAS[@MODULE[ModuleEngine*]:HAS[@PROPELLANT[IntakeAir]],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE[ModuleEngine*]:HAS[@PROPELLANT[IntakeAir]]
	{
		@maxThrust *= 0.5
		@atmosphereCurve
		{
			@key ^= :^0 ::
			@key ^= : 0 0::
			@key *= 0.75
			@key ^= :^:0 :
			@key ^= :$: 0 0:
		}
	}
}
//cleanup
@PART[*]:HAS[#lrtr_thrustCurve[*]]:AFTER[zLRTR]
{
    !lrtr_thrustCurve = DEL
}
@PART[*]:HAS[#lrtr_engineCluster[*],!MODULE[ModuleTagNotRescaled]]:AFTER[zLRTR]
{
	@MODULE,*:HAS[#name[ModuleEngines*]]
	{
		@maxThrust *= #$/lrtr_engineCluster$
		@UPGRADES
		{
			@UPGRADE,*
			{
				@maxThrust *= #$/lrtr_engineCluster$
			}
		}
	}
    @MODULE,*:HAS[#name[ModuleB9PartSwitch]]
    {
        @SUBTYPE,*:HAS[@MODULE]
        {
            @MODULE
            {
                @DATA:HAS[#maxThrust]
                {
                    @maxThrust *= #$/lrtr_engineCluster$
                }
            }
        }
    }
    @MODULE[ModuleEngineConfigs]
	{
		@CONFIG,*
		{
			@maxThrust *= #$/lrtr_engineCluster$
		}
	}

}
@PART[*]:HAS[#lrtr_engineCluster[*]]:AFTER[zLRTR]
{
	!lrtr_engineCluster = DEL
}
@PART[*]:HAS[@MODULE[ModuleRoboticServoRotor]]:NEEDS[LRTRRescale]
{
	@MODULE[ModuleRoboticServoRotor]
	{
		@maxMotorOutput *= 4
	}
}

//tanks and resources
@PART[*]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@RESOURCE[Oxidizer]
	{
		@amount *= 3.6
		@maxAmount *= 3.6
	}
	@RESOURCE[LiquidFuel]
	{
		@amount *= 3.6
		@maxAmount *= 3.6
	}
	@RESOURCE[LqdHydrogen]
	{
		@amount *= 3.6
		@maxAmount *= 3.6
	}
	@RESOURCE[XenonGas]
	{
		@amount *= 4
		@maxAmount *= 4
	}
	@RESOURCE[ArgonGas]
	{
		@amount *= 4
		@maxAmount *= 4
	}
	@RESOURCE[Lithium]
	{
		@amount *= 4
		@maxAmount *= 4
	}
	@RESOURCE[Antimatter]
	{
		@amount *= 4
		@maxAmount *= 4
	}
	@RESOURCE[MonoPropellant]
	{
		@amount *= 1.25 // higher dry fraction
		// Note: this means that volume utilization will only be 1/3 that of a regular
		// LFO tank....
		@maxAmount *= 1.25
	}
	@RESOURCE[Ore]
	{
		@amount *= 3.6
		@maxAmount *= 3.6 // assume same density as LF/OX
	}
	@RESOURCE[IntakeAir]
	{
		@amount *= 4
		@maxAmount *= 4
	}
	@RESOURCE[ElectricCharge]
	{
		@amount *= 4
		@maxAmount *= 4
	}
	@RESOURCE[SolidFuel] //in line with real world fuel loads
	{
		@amount *= 5.78
		@maxAmount *= 5.78
	}
	@MODULE[ModuleFuelTanks]:HAS[#type[Solid]]
	{
		@volume *= 1.61
	}
	@MODULE[ModuleB9PartSwitch]:HAS[#baseVolume]
	{
	    @baseVolume *= 3.6
	}
	@MODULE[ModuleFuelTanks]:HAS[#volume]
	{
		@volume *= 3.6
	}
	
	@MODULE[Configure]
	{
		@SETUP,*
		{
			@RESOURCE,*
			{
				@amount *= 3.6
				@maxAmount *= 3.6
			}
		}
	}
}
// decrease resource costs
@RESOURCE_DEFINITION[Oxidizer|LiquidFuel|SolidFuel|MonoPropellant|XenonGas]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@unitCost *= 0.1
}
// Fuel tanks, lower dry mass but larger volume
@PART[*]:HAS[@RESOURCE[LiquidFuel],!MODULE[ModuleB9PartSwitch],!MODULE[ModuleCommand],!MODULE[ModuleEngines*],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@mass *= 2.4
}
@PART[*]:HAS[@MODULE[ModuleB9PartSwitch]:HAS[#moduleID[fuelSwitch]],!MODULE[ModuleCommand],!MODULE[ModuleEngines*],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@mass *= 2.4
}

//parts and aerodynamics
// Drag cube changes from rescale
@PART[*]:HAS[@DRAG_CUBE,!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@DRAG_CUBE
	{	    
		@cube,*[1,,] *= 2.56
		@cube,*[3,,] *= 1.6
		@cube,*[4,,] *= 2.56
		@cube,*[6,,] *= 1.6
		@cube,*[7,,] *= 2.56
		@cube,*[9,,] *= 1.6
		@cube,*[10,,] *= 2.56
		@cube,*[12,,] *= 1.6
		@cube,*[13,,] *= 2.56
		@cube,*[15,,] *= 1.6
		@cube,*[16,,] *= 2.56
		@cube,*[18,,] *= 1.6
		@cube,*[19,,] *= 1.6
		@cube,*[20,,] *= 1.6
		@cube,*[21,,] *= 1.6
		@cube,*[22,,] *= 1.6
		@cube,*[23,,] *= 1.6
		@cube,*[24,,] *= 1.6
	}
}
//heat shields
@PART[*]:HAS[@MODULE[ModuleAblator],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE[ModuleAblator]
	{
		@lossConst *= 0.5
	}
}
//parachutes, special case
@PART[*]:HAS[@MODULE[ModuleDragModifier],@MODULE[ModuleParachute],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE,*:HAS[#name[ModuleDragModifier]]
	{
		@dragModifier *= 0.390625 // 1/1.6^2
	}
}
//fairings
@PART[*]:HAS[@MODULE[ModuleProceduralFairing],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	%rescaleFactor = 1.0

	//adds scale variable when needed to base
	//a potential bug if another MODEL without position is added
    @MODEL,*:HAS[~position[*],~scale[*]]
    {
		%scale = 1.0, 1.0, 1.0
    }      	
    //increase base size width/length, keep height same for asthetics
    @MODEL,*:HAS[~position[*]]
    {
    	scale0 = #$scale[0]$
	   	scale2 = #$scale[2]$
    	@scale0 *= 1.6
    	@scale2 *= 1.6
    	@scale = #$scale0$,$scale[1]$, $scale2$
    	!scale0 = DEL
    	!scale2 = DEL
    }
	@MODULE[ModuleProceduralFairing]
	{
		@baseRadius *= 1.6
		@maxRadius *= 1.6
		@snapThreshold *= 1.6
		@xSectionHeightMax *= 2		
		@UnitAreaMass = 0.0075
		@UnitAreaCost = 6
	}
}
//fairing interstage
@PART[*]:HAS[@MODULE[ModuleProceduralFairing],#node_stack_interstage01a[*],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	//increase autotruss size.  autotruss has a 'position' variable
	//potential bug if another MODEL with position is added
	@MODEL,*:HAS[#position[*]]
	{
		&scale = 1.0, 1.0, 1.0
		@scale[*] *= 1.6
	}
		
	//stack position height changes just a bit when the model scales asymetrically. (fairing height is not increased.  see above)
	%position_height = #$/MODEL:HAS[#position[*]]/position[1]$
	@position_height /= 1.6
	
	@node_stack_interstage01a[1] *= 1.6
	@node_stack_interstage01a[1] -= #$position_height$
	@node_stack_interstage01b[1] *= 1.6
	@node_stack_interstage01b[1] -= #$position_height$

	@node_stack_interstage02a[1] *= 1.6
	@node_stack_interstage02a[1] -= #$position_height$
	@node_stack_interstage02b[1] *= 1.6
	@node_stack_interstage02b[1] -= #$position_height$

	@node_stack_interstage03a[1] *= 1.6
	@node_stack_interstage03a[1] -= #$position_height$
	@node_stack_interstage03b[1] *= 1.6
	@node_stack_interstage03b[1] -= #$position_height$

	@node_stack_interstage04a[1] *= 1.6
	@node_stack_interstage04a[1] -= #$position_height$
	@node_stack_interstage04b[1] *= 1.6
	@node_stack_interstage04b[1] -= #$position_height$

	@node_stack_interstage05a[1] *= 1.6
	@node_stack_interstage05a[1] -= #$position_height$
	@node_stack_interstage05b[1] *= 1.6
	@node_stack_interstage05b[1] -= #$position_height$

	@node_stack_interstage06a[1] *= 1.6
	@node_stack_interstage06a[1] -= #$position_height$
	@node_stack_interstage06b[1] *= 1.6
	@node_stack_interstage06b[1] -= #$position_height$
	!position_height = DEL
	
	@node_stack_top[0] *= 1.6
	@node_stack_top[2] *= 1.6
	
	@node_stack_bottom[0] *= 1.6
	@node_stack_bottom[2] *= 1.6
}
// Rescale wings
@PART[*]:HAS[@MODULE[*]:HAS[#deflectionLiftCoeff[*]],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE,*:HAS[#deflectionLiftCoeff[*]]
	{
		@deflectionLiftCoeff *= 2.56
	}
}
// scale up intakes
@PART[*]:HAS[@MODULE[ModuleResourceIntake],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	//@mass *= 2.56
	@MODULE[ModuleResourceIntake]
	{
		@area *= 2.56
	}
}

//variant stack nodes for engines, strutural tubes, engine plates, etc.
@PART[*]:HAS[@MODULE[ModulePartVariants],!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE[ModulePartVariants]
	{
	   @VARIANT,*
 	   {
 	   		@NODES:HAS[#node_stack_bottom[*]] {
		    	stack_bottom0 = #$node_stack_bottom[0]$
			    stack_bottom1 = #$node_stack_bottom[1]$
    			stack_bottom2 = #$node_stack_bottom[2]$
		    	@stack_bottom0 *= 1.6
	    		@stack_bottom1 *= 1.6
		    	@stack_bottom2 *= 1.6
	    		@node_stack_bottom = #$stack_bottom0$,$stack_bottom1$,$stack_bottom2$,$node_stack_bottom[3]$,$node_stack_bottom[4]$,$node_stack_bottom[5]$,$node_stack_bottom[6]$
	    		!stack_bottom0 = DEL
			    !stack_bottom1 = DEL
    			!stack_bottom2 = DEL
	    	}
 	   		@NODES:HAS[#node_stack_top[*]] {
		    	stack_top0 = #$node_stack_top[0]$
			    stack_top1 = #$node_stack_top[1]$
    			stack_top2 = #$node_stack_top[2]$
		    	@stack_top0 *= 1.6
	    		@stack_top1 *= 1.6
		    	@stack_top2 *= 1.6
	    		@node_stack_top= #$stack_top0$,$stack_top1$,$stack_top2$,$node_stack_top[3]$,$node_stack_top[4]$,$node_stack_top[5]$,$node_stack_top[6]$
	    		!stack_top0 = DEL
			    !stack_top1 = DEL
    			!stack_top2 = DEL
	    	}
 	   		@NODES:HAS[#node_stack_bottom1[*]] {
		    	stack_bottom10 = #$node_stack_bottom1[0]$
			    stack_bottom11 = #$node_stack_bottom1[1]$
    			stack_bottom12 = #$node_stack_bottom1[2]$
		    	@stack_bottom10 *= 1.6
	    		@stack_bottom11 *= 1.6
		    	@stack_bottom12 *= 1.6
	    		@node_stack_bottom1 = #$stack_bottom10$,$stack_bottom11$,$stack_bottom12$,$node_stack_bottom1[3]$,$node_stack_bottom1[4]$,$node_stack_bottom1[5]$,$node_stack_bottom1[6]$
	    		!stack_bottom10 = DEL
			    !stack_bottom11 = DEL
    			!stack_bottom12 = DEL
	    	}
 	   		@NODES:HAS[#node_stack_bottom2[*]] {
		    	stack_bottom20 = #$node_stack_bottom2[0]$
			    stack_bottom21 = #$node_stack_bottom2[1]$
    			stack_bottom22 = #$node_stack_bottom2[2]$
		    	@stack_bottom20 *= 1.6
	    		@stack_bottom21 *= 1.6
		    	@stack_bottom22 *= 1.6
	    		@node_stack_bottom2 = #$stack_bottom20$,$stack_bottom21$,$stack_bottom22$,$node_stack_bottom2[3]$,$node_stack_bottom2[4]$,$node_stack_bottom2[5]$,$node_stack_bottom2[6]$
	    		!stack_bottom20 = DEL
			    !stack_bottom21 = DEL
    			!stack_bottom22 = DEL
	    	}
	    }
	}
}

//mining drills
@PART[*]:HAS[@MODULE[ModuleResourceHarvester]|@MODULE[ModuleAsteroidDrill]|@MODULE[ModuleCometDrill]!MODULE[ModuleTagNotRescaled]]:FOR[zLRTR]:NEEDS[LRTRRescale]
{
	@MODULE,*:HAS[#ImpactRange[*]]
	{
		@ImpactRange *= 1.6
	}
}
